{{> header}}
<h1 id="my">ðŸ‘¾ SpaceMock ðŸ‘¾ 1.0-Alpha</h1>

<table class="table table-striped table-bordered">
    <thead>
    <th>id</th>
    <th>Note</th>
    <th>
        <button class="btn btn-info" onclick='listen(true)'>
            Listen New
        </button>
    </th>
    </thead>

    {{#indexUiModel.items}}
        <img src="">
        <tr>
            <td>{{folder.name}}</td>
            <td>
                    <textarea id="notas{{folder.name}}" class="form-control" rows="10" cols="80">{{notes}}</textarea><br>
                    <button class='btn btn-info' onclick="saveNote({{folder.name}})">Guardar</button>
            </td>
            <td id="editTd{{id}}">
                <button class='btn btn-danger' onclick='deleteMock("{{folder.absolutePath}}")'>Delete Mock</button>
                <button class='btn btn-success' onclick='listenId("{{folder.name}}")'>Rewrite Mockk from remote</button>
                <button class='btn btn-info' onclick='localMode("{{folder.name}}")'>Local Mode</button>
            </td>
        </tr>
    {{/indexUiModel.items}}

    <script>
    function deleteMock(file) {
    var data = {"file": file};

    fetch('/delete', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        location.reload();
    })
    .then(json => console.log(json))
    .catch(error => console.error('Error:', error));
}

function listenId(id) {
    fetch(`/listen?id=${id}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        location.reload();
    })
    .then(json => console.log(json))
    .catch(error => console.error('Error:', error));
}

function localMode(id){
fetch(`/localMode?id=${id}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        location.reload();
    })
    .then(json => console.log(json))
    .catch(error => console.error('Error:', error));
}

function saveNote(id) {
  var elementId = "notas" + id;
  var text = document.getElementById(elementId).value;
  var data = {"id": id.toString(), "text": text};
  fetch(`/saveNote`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
          },
        body: JSON.stringify(data)
    })
    .then(response => {
        location.reload();
    })
    .then(json => console.log(json))
    .catch(error => console.error('Error:', error));
}

function saveRules() {
  var elementId = "rules";
  var text = document.getElementById(elementId).value;
  var data = {
    "text": text,
    "type": "body"
  };
  fetch(`/saveRules`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
          },
        body: JSON.stringify(data)
    })
    .then(response => {
        location.reload();
    })
    .then(json => console.log(json))
    .catch(error => console.error('Error:', error));
}

function saveRulesUrl() {
  var elementId = "rulesUrl";
  var text = document.getElementById(elementId).value;
  var data = {
    "text": text,
    "type": "url"
  };
  fetch(`/saveRules`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
          },
        body: JSON.stringify(data)
    })
    .then(response => {
        location.reload();
    })
    .then(json => console.log(json))
    .catch(error => console.error('Error:', error));
}

function listen(activate) {
        fetch('/listen', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => {
            location.reload();
        })
        .then(json => console.log(json))
        .catch(error => console.error('Error:', error));
}



    </script>
</table>
<br/>
<br/>
<br/>
<h2>Mock Body Rules</h2>
<p>Use the differentiator to work on services that are hosted at the same url and have a differentiating element in the body, prefixing the field that differentiates them.</p>
<form>
    <textarea id="rules" class="form-control" name="rules">{{indexUiModel.rules.body}}</textarea><br>
    <button class='btn btn-warning' onclick="saveRules()">Guardar Rules</button>
</form>

<h2>Mock URL Rules</h2>
<p>Use the URL differentiator to add urls containing these characters as equals within URL params.</p>
<form>
    <textarea id="rulesUrl" class="form-control" name="rules">{{indexUiModel.rules.url}}</textarea><br>
    <button class='btn btn-warning' onclick="saveRulesUrl()">Save Rules</button>
</form>



{{> footer}}


